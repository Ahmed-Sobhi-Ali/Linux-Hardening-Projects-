#!/bin/bash

# SSH Security Hardening Script for RHEL/Fedora Systems
# Author: Ahmed Sobhi Ali
# Version: 1.0
# Description: Automates SSH hardening with comprehensive security measures

# =====================================
# Configuration Variables
# =====================================
SSH_PORT=4545
SSH_USER="secssh"
SSH_NETWORK="192.168.124.0/24"
REMOTE_HOST="192.168.124.100"  # Target server for key distribution
SSH_CONFIG_DIR="/etc/ssh/sshd_config.d"
SSH_HARDENING_CONFIG="${SSH_CONFIG_DIR}/hardening.conf"
SSH_LOG_FILE="/var/log/secure_ssh.log"
RSYSLOG_SSH_CONFIG="/etc/rsyslog.d/30-ssh.conf"
SCRIPT_LOG="/var/log/ssh_hardening.log"

# =====================================
# Color Definitions for Output
# =====================================
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# =====================================
# Logging and Error Handling
# =====================================
set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Trap for cleanup on exit
trap 'cleanup_on_exit' EXIT
trap 'error_handler $LINENO' ERR

# Function to handle errors
error_handler() {
    local line_number=$1
    echo -e "${RED}[ERROR]${NC} Script failed at line ${line_number}. Check ${SCRIPT_LOG} for details." >&2
    log_message "ERROR" "Script failed at line ${line_number}"
    exit 1
}

# Function for cleanup on exit
cleanup_on_exit() {
    if [[ $? -ne 0 ]]; then
        echo -e "${YELLOW}[CLEANUP]${NC} Performing cleanup operations..."
        log_message "INFO" "Script exited with cleanup"
    fi
}

# Logging function
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[${timestamp}] [${level}] ${message}" >> "${SCRIPT_LOG}"
}

# Print colored message function
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}[$(date '+%H:%M:%S')]${NC} ${message}"
    log_message "INFO" "${message}"
}

# =====================================
# Prerequisite Checks
# =====================================
check_prerequisites() {
    print_message "${BLUE}" "üîç Performing prerequisite checks..."
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        print_message "${RED}" "‚ùå This script must be run as root!"
        exit 1
    fi
    
    # Check if required commands exist
    local required_commands=("systemctl" "firewall-cmd" "semanage" "ssh-keygen")
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            print_message "${RED}" "‚ùå Required command not found: $cmd"
            exit 1
        fi
    done
        
    # Create log file if it doesn't exist
    touch "${SCRIPT_LOG}"
    
    print_message "${GREEN}" "‚úÖ All prerequisite checks passed"
}

# =====================================
# SSH Configuration Functions
# =====================================
create_ssh_hardening_config() {
    print_message "${BLUE}" "üîß Creating SSH hardening configuration..."
    
    # Create sshd_config.d directory if it doesn't exist
    if [[ ! -d "${SSH_CONFIG_DIR}" ]]; then
        mkdir -p "${SSH_CONFIG_DIR}"
        print_message "${YELLOW}" "üìÅ Created directory: ${SSH_CONFIG_DIR}"
    fi
    
    # Check if configuration already exists
    if [[ -f "${SSH_HARDENING_CONFIG}" ]]; then
        print_message "${YELLOW}" "‚ö†Ô∏è  SSH hardening config already exists. Backing up..."
        cp "${SSH_HARDENING_CONFIG}" "${SSH_HARDENING_CONFIG}.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Create hardening configuration
    cat > "${SSH_HARDENING_CONFIG}" << EOF
# SSH Hardening Configuration
# Generated by SSH Security Hardening Script
# Date: $(date)

# Network Configuration
Port ${SSH_PORT}
AddressFamily inet

# Authentication Settings
PermitRootLogin no
PasswordAuthentication no
PubkeyAuthentication yes
AuthenticationMethods publickey
ChallengeResponseAuthentication no
UsePAM yes

# User Access Control
AllowUsers ${SSH_USER}@${SSH_NETWORK}
MaxAuthTries 3
MaxStartups 2
MaxSessions 2

# Session Management
ClientAliveInterval 100
ClientAliveCountMax 2
LoginGraceTime 30

# Security Settings
PermitEmptyPasswords no
X11Forwarding no
AllowAgentForwarding no
AllowTcpForwarding no
GatewayPorts no
PermitTunnel no

# Logging
SyslogFacility AUTHPRIV
LogLevel VERBOSE

# Protocol Settings
Protocol 2
EOF

    print_message "${GREEN}" "‚úÖ SSH hardening configuration created successfully"
    log_message "SUCCESS" "SSH hardening config created at ${SSH_HARDENING_CONFIG}"
}

validate_ssh_config() {
    print_message "${BLUE}" "üîç Validating SSH configuration..."
    
    if sshd -t; then
        print_message "${GREEN}" "‚úÖ SSH configuration is valid"
        return 0
    else
        print_message "${RED}" "‚ùå SSH configuration validation failed!"
        log_message "ERROR" "SSH configuration validation failed"
        return 1
    fi
}

reload_ssh_service() {
    print_message "${BLUE}" "üîÑ Reloading SSH service..."
    
    # Validate configuration before reloading
    if validate_ssh_config; then
        if systemctl reload sshd; then
            print_message "${GREEN}" "‚úÖ SSH service reloaded successfully"
            log_message "SUCCESS" "SSH service reloaded"
        else
            print_message "${RED}" "‚ùå Failed to reload SSH service"
            log_message "ERROR" "Failed to reload SSH service"
            return 1
        fi
    else
        print_message "${RED}" "‚ùå Skipping SSH reload due to configuration errors"
        return 1
    fi
}

# =====================================
# SSH Key Management Functions
# =====================================
generate_ssh_keys() {
    print_message "${BLUE}" "üîë Managing SSH keys..."
    
    local ssh_key_path="/home/${SSH_USER}/.ssh/id_rsa"
    local ssh_dir="/home/${SSH_USER}/.ssh"
    
    # Create user if doesn't exist
    if ! id "${SSH_USER}" &>/dev/null; then
        print_message "${YELLOW}" "üë§ Creating user: ${SSH_USER}"
        useradd -m -s /bin/bash "${SSH_USER}"
        usermod -aG wheel "${SSH_USER}"  # Add to sudo group
        log_message "INFO" "Created user ${SSH_USER}"
    fi
    
    # Create .ssh directory
    if [[ ! -d "${ssh_dir}" ]]; then
        mkdir -p "${ssh_dir}"
        chown "${SSH_USER}:${SSH_USER}" "${ssh_dir}"
        chmod 700 "${ssh_dir}"
    fi
    
    # Generate SSH key pair if it doesn't exist
    if [[ ! -f "${ssh_key_path}" ]]; then
        print_message "${YELLOW}" "üîê Generating SSH key pair..."
        sudo -u "${SSH_USER}" ssh-keygen -t rsa -b 4096 -f "${ssh_key_path}" -N "" -C "${SSH_USER}@$(hostname)"
        
        # Set proper permissions
        chmod 600 "${ssh_key_path}"
        chmod 644 "${ssh_key_path}.pub"
        chown "${SSH_USER}:${SSH_USER}" "${ssh_key_path}" "${ssh_key_path}.pub"
        
        print_message "${GREEN}" "‚úÖ SSH key pair generated successfully"
        log_message "SUCCESS" "SSH key pair generated for ${SSH_USER}"
    else
        print_message "${YELLOW}" "‚ö†Ô∏è  SSH key pair already exists"
    fi
    
    # Display public key
    print_message "${CYAN}" "üìã Public key content:"
    echo -e "${YELLOW}$(cat ${ssh_key_path}.pub)${NC}"
}

distribute_ssh_key() {
    print_message "${BLUE}" "üì§ Distributing SSH key to remote host..."
    
    local ssh_key_path="/home/${SSH_USER}/.ssh/id_rsa.pub"
    
    if [[ -f "${ssh_key_path}" ]]; then
        print_message "${YELLOW}" "üåê Attempting to copy key to ${REMOTE_HOST}..."
        print_message "${CYAN}" "üí° Manual step: Run the following command to distribute the key:"
        echo -e "${YELLOW}ssh-copy-id -i ${ssh_key_path} ${SSH_USER}@${REMOTE_HOST}${NC}"
        
        # Note: Automated key distribution would require existing SSH access
        # which may not be available in a hardening scenario
        log_message "INFO" "SSH key distribution instructions provided"
    else
        print_message "${RED}" "‚ùå SSH public key not found"
        return 1
    fi
}

# =====================================
# Firewall Configuration Functions
# =====================================
configure_firewall() {
    print_message "${BLUE}" "üî• Configuring firewall for SSH..."
    
    # Check if firewalld is running
    if ! systemctl is-active --quiet firewalld; then
        print_message "${YELLOW}" "‚ö†Ô∏è  Starting firewalld service..."
        systemctl start firewalld
        systemctl enable firewalld
    fi
    
    # Check if port is already open
    if firewall-cmd --list-ports | grep -q "${SSH_PORT}/tcp"; then
        print_message "${YELLOW}" "‚ö†Ô∏è  Port ${SSH_PORT}/tcp is already open"
    else
        print_message "${YELLOW}" "üîì Opening port ${SSH_PORT}/tcp..."
        firewall-cmd --permanent --add-port="${SSH_PORT}/tcp"
        firewall-cmd --reload
        print_message "${GREEN}" "‚úÖ Port ${SSH_PORT}/tcp opened successfully"
    fi
    
    # Show current firewall status
    print_message "${CYAN}" "üìä Current firewall ports:"
    firewall-cmd --list-ports
    
    log_message "SUCCESS" "Firewall configured for SSH port ${SSH_PORT}"
}

# =====================================
# SELinux Configuration Functions
# =====================================
configure_selinux() {
    print_message "${BLUE}" "üõ°Ô∏è  Configuring SELinux for SSH..."
    
    # Check if SELinux is enabled
    if ! command -v getenforce &> /dev/null || [[ $(getenforce) == "Disabled" ]]; then
        print_message "${YELLOW}" "‚ö†Ô∏è  SELinux is disabled or not available"
        return 0
    fi
    
    # Check if SSH port is already defined
    if semanage port -l | grep -q "ssh_port_t.*${SSH_PORT}"; then
        print_message "${YELLOW}" "‚ö†Ô∏è  SSH port ${SSH_PORT} is already defined in SELinux"
    else
        print_message "${YELLOW}" "üîß Adding SSH port ${SSH_PORT} to SELinux..."
        semanage port -a -t ssh_port_t -p tcp "${SSH_PORT}"
        print_message "${GREEN}" "‚úÖ SSH port ${SSH_PORT} added to SELinux successfully"
    fi
    
    # Show current SSH ports in SELinux
    print_message "${CYAN}" "üìä Current SSH ports in SELinux:"
    semanage port -l | grep ssh_port_t
    
    log_message "SUCCESS" "SELinux configured for SSH port ${SSH_PORT}"
}

# =====================================
# Logging Configuration Functions
# =====================================
configure_ssh_logging() {
    print_message "${BLUE}" "üìù Configuring SSH logging..."
    
    # Create custom SSH logging configuration
    cat > "${RSYSLOG_SSH_CONFIG}" << EOF
# Custom SSH logging configuration
# Generated by SSH Security Hardening Script
# Date: $(date)

# Log SSH authentication messages to separate file
:programname, isequal, "sshd" ${SSH_LOG_FILE}
& stop
EOF

    # Create log file if it doesn't exist
    touch "${SSH_LOG_FILE}"
    chmod 640 "${SSH_LOG_FILE}"
    
    # Restart rsyslog to apply changes
    if systemctl restart rsyslog; then
        print_message "${GREEN}" "‚úÖ SSH logging configuration applied successfully"
        log_message "SUCCESS" "SSH logging configured to ${SSH_LOG_FILE}"
    else
        print_message "${RED}" "‚ùå Failed to restart rsyslog service"
        return 1
    fi
}

# =====================================
# Log Analysis Functions
# =====================================
analyze_ssh_logs() {
    print_message "${BLUE}" "üìä Analyzing SSH logs..."
    
    if [[ ! -f "${SSH_LOG_FILE}" ]]; then
        print_message "${YELLOW}" "‚ö†Ô∏è  SSH log file not found: ${SSH_LOG_FILE}"
        return 0
    fi
    
    # Check if log file has content
    if [[ ! -s "${SSH_LOG_FILE}" ]]; then
        print_message "${YELLOW}" "‚ö†Ô∏è  SSH log file is empty"
        return 0
    fi
    
    print_message "${CYAN}" "üîç Failed login attempts by IP:"
    echo -e "${YELLOW}"
    grep "Failed password\|authentication failure" "${SSH_LOG_FILE}" 2>/dev/null | \
        awk '{print $(NF-3)}' | sort | uniq -c | sort -nr | head -10 || \
        echo "No failed login attempts found"
    echo -e "${NC}"
    
    print_message "${CYAN}" "üîç Successful login attempts:"
    echo -e "${GREEN}"
    grep "Accepted" "${SSH_LOG_FILE}" 2>/dev/null | \
        awk '{print $1, $2, $3, "User:", $9, "IP:", $11}' | tail -10 || \
        echo "No successful login attempts found"
    echo -e "${NC}"
    
    print_message "${CYAN}" "üìà Log file statistics:"
    echo -e "${PURPLE}"
    echo "Total lines in log: $(wc -l < "${SSH_LOG_FILE}" 2>/dev/null || echo 0)"
    echo "Log file size: $(du -h "${SSH_LOG_FILE}" 2>/dev/null | cut -f1 || echo "0B")"
    echo "Last modified: $(stat -c %y "${SSH_LOG_FILE}" 2>/dev/null || echo "Unknown")"
    echo -e "${NC}"
    
    log_message "INFO" "SSH log analysis completed"
}

# =====================================
# System Status Functions
# =====================================
show_system_status() {
    print_message "${BLUE}" "üìã System Status Summary"
    
    echo -e "${CYAN}===========================================${NC}"
    echo -e "${CYAN}    SSH Security Hardening Summary${NC}"
    echo -e "${CYAN}===========================================${NC}"
    
    # SSH Service Status
    echo -e "${YELLOW}SSH Service:${NC}"
    if systemctl is-active --quiet sshd; then
        echo -e "  Status: ${GREEN}Active${NC}"
        echo -e "  Port: ${CYAN}${SSH_PORT}${NC}"
        echo -e "  Config: ${SSH_HARDENING_CONFIG}"
    else
        echo -e "  Status: ${RED}Inactive${NC}"
    fi
    echo
    
    # Firewall Status
    echo -e "${YELLOW}Firewall:${NC}"
    if systemctl is-active --quiet firewalld; then
        echo -e "  Status: ${GREEN}Active${NC}"
        echo -e "  SSH Port: ${CYAN}${SSH_PORT}/tcp${NC}"
    else
        echo -e "  Status: ${RED}Inactive${NC}"
    fi
    echo
    
    # SELinux Status
    echo -e "${YELLOW}SELinux:${NC}"
    if command -v getenforce &> /dev/null; then
        echo -e "  Status: ${CYAN}$(getenforce)${NC}"
        if [[ $(getenforce) != "Disabled" ]]; then
            echo -e "  SSH Port: ${CYAN}${SSH_PORT}${NC} ($(semanage port -l | grep ssh_port_t | grep -q ${SSH_PORT} && echo "Configured" || echo "Not configured"))"
        fi
    else
        echo -e "  Status: ${YELLOW}Not available${NC}"
    fi
    echo
    
    # User Status
    echo -e "${YELLOW}SSH User:${NC}"
    if id "${SSH_USER}" &>/dev/null; then
        echo -e "  User: ${GREEN}${SSH_USER}${NC} (exists)"
        echo -e "  SSH Key: ${CYAN}$(ls /home/${SSH_USER}/.ssh/id_rsa.pub &>/dev/null && echo "Generated" || echo "Not found")${NC}"
    else
        echo -e "  User: ${RED}${SSH_USER}${NC} (not found)"
    fi
    echo
    
    # Logging Status
    echo -e "${YELLOW}Logging:${NC}"
    echo -e "  SSH Log: ${CYAN}${SSH_LOG_FILE}${NC}"
    echo -e "  Rsyslog Config: ${CYAN}${RSYSLOG_SSH_CONFIG}${NC}"
    
    echo -e "${CYAN}===========================================${NC}"
}

# =====================================
# Main Execution Function
# =====================================
main() {
    print_message "${PURPLE}" "üöÄ Starting SSH Security Hardening Script"
    log_message "START" "SSH hardening script initiated"
    
    # Execute all functions in sequence
    check_prerequisites
    create_ssh_hardening_config
    reload_ssh_service
    generate_ssh_keys
    distribute_ssh_key
    configure_firewall
    configure_selinux
    configure_ssh_logging
    analyze_ssh_logs
    show_system_status
    
    print_message "${GREEN}" "üéâ SSH Security Hardening completed successfully!"
    print_message "${CYAN}" "üìù Check the log file for details: ${SCRIPT_LOG}"
    print_message "${YELLOW}" "‚ö†Ô∏è  Important: Test SSH connection before closing current session!"
    
    log_message "COMPLETE" "SSH hardening script completed successfully"
}

# =====================================
# Script Execution
# =====================================
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
